#! /usr/bin/env nix-shell
#! nix-shell -i bash -p bash pandoc panpipe panhandle haskellPackages.pandoc-citeproc

# Pass raw pandoc arguments in $ARGS

case $OPTIONS in
    beamer) TYPE="beamer"
            ;;
    pp) FILTERS="panpipe panhandle"
        BIB="/home/chris/Documents/ArchivedPapers/Bibtex.bib"
        ;;
esac

function render {
  # Render a markdown file to PDF
  pdf=$(pdfOf "$1")
  NEWARGS=""
  [ ! -z "$TYPE" ] && NEWARGS="-t ${TYPE}"
  [ ! -z "$BIB"  ] && NEWARGS="${NEWARGS} --bibliography=${BIB}"
  if [ ! -z "$FILTERS" ]
  then
      for filter in $FILTERS
      do
          NEWARGS="${NEWARGS} --filter=${filter}"
      done
  fi
  NEWARGS="${NEWARGS} -o ${pdf} $1"
  echo "RUNNING: pandoc $ARGS $NEWARGS"
  ALLARGS=( $ARGS $NEWARGS )
  eval pandoc "${ALLARGS[@]}"
}

function needsUpdate {
  # Return 0 if the given Markdown file needs a new PDF generating
  md="$1"
  pdf=$(pdfOf "$md")
  if [ ! -e "$pdf" ]
  then
    return 0
  fi

  mtime=$(mtime "$md")
  ptime=$(mtime "$pdf")
  if [ "$ptime" -lt "$mtime" ]
  then
    return 0
  fi
  return 1
}

function mtime {
  stat -L --printf="%Y" "$1"
}

function pdfOf {
  # Get the PDF filename to use when rendering the given Markdown file
  dir=$(dirname "$1")
  base=$(basename "$1" .md)
  if [ -z "$EXTENSION" ]
  then
      echo "${dir}/${base}.pdf"
  else
      echo "${dir}/${base}.${EXTENSION}"
  fi
}

function keepPat {
  if [ -z "$PATTERN" ]
  then
      cat
  else
      grep "$PATTERN"
  fi
}

function renderAll {
  # Render all markdown files which need updating
  for md in $(find . -name "*.md" | grep -v "\.#" | keepPat)
  do
      needsUpdate "$md" && render "$md"
  done
}

renderAll
